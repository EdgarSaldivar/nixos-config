# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, nixos-hardware, sdImage, ... }:

{
  nixpkgs.hostPlatform.system = "aarch64-linux";
  nixpkgs.config.allowUnsupportedSystem = true;
  console.enable = false;
  boot.initrd.kernelModules = [ 
    "xhci_pci" 
    "usbhid" 
    "uas" 
    "bcm2835_rng" 
    "bcm2835_wdt"
    "usb_storage"
    "i2c_bcm2835"
    "snd_bcm2835"
    "bcm2835_dma"
    "vc4"
    "pcie_brcmstb" # required for the pcie bus to work
    "reset-raspberrypi" # required for vl805 firmware to load
    ];
  boot.kernelModules = [ 
    "xhci_pci" 
    "usbhid" 
    "snd_bcm2835"
    "i2c_bcm2835"
    "uas" 
    "bcm2835_rng" 
    "bcm2835_wdt"
    "usb_storage"
    "vc4"
    "pcie_brcmstb" # required for the pcie bus to work
    "reset-raspberrypi" # required for vl805 firmware to load
   # "gasket" # Kernel module for Coral USB Accelerator
   # "apex"   # Kernel module for Coral USB Accelerator
  ];
  boot = {
    #kernelPackages = lib.mkForce pkgs.linuxKernel.packages.linux_rpi4
    kernelPackages = pkgs.linuxPackages;
    consoleLogLevel = lib.mkDefault 7;
    #kernelPackages = pkgs.linuxKernel.packages.linux_rpi4;
    kernelParams =
      [ "console=ttyS0,115200n8" "console=ttyAMA0,115200n8" "console=tty0" ];

    #kernelPackages = pkgs.linuxPackages_latest;
    loader = {
      grub.enable = false;
      generic-extlinux-compatible.enable = true;
      generic-extlinux-compatible.configurationLimit = 20;  
    };
  };
  boot.extraModulePackages = [ ];
  swapDevices = [ ];
  hardware.enableRedistributableFirmware = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.efi.efiSysMountPoint = "/boot";
  boot.tmp.cleanOnBoot = true;


  fileSystems."/" = lib.mkForce {
    device = "/dev/disk/by-partlabel/disk-my-disk-root";
    fsType = "ext4";
  };

  fileSystems."/boot" = lib.mkForce{
    device = "/dev/disk/by-partlabel/disk-my-disk-ESP";
    fsType = "vfat";
  };

/*
  powerManagement.cpuFreqGovernor = lib.mkDefault "ondemand";

/*
  # GPU
  hardware = {
    raspberry-pi = {
      "4" = {
        apply-overlays-dtmerge.enable = true;
        fkms-3d.enable = true;
      };
    };
    deviceTree = {
      enable = true;
      filter = lib.mkForce "*rpi-4-*.dtb";
    };
  };
*//*
  # eeprom
  environment.systemPackages = with pkgs; [
    libraspberrypi
    raspberrypi-eeprom
  ];

  # Audio
  hardware.pulseaudio.enable = true;

  #Bluetooth
  systemd.services.btattach = {
    before = [ "bluetooth.service" ];
    after = [ "dev-ttyAMA0.device" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig = {
      ExecStart = "${pkgs.bluez}/bin/btattach -B /dev/ttyAMA0 -P bcm -S 3000000";
    };
  };
 # Automate update PI firmware
  environment.shellAliases = {
      raspi-cpu = ''
        sudo vcgencmd get_throttled && sudo vcgencmd measure_temp
      '';
      raspi-firmware-update = ''
        sudo mkdir -p /mnt && \
        sudo mount /dev/disk/by-label/FIRMWARE /mnt && \
        BOOTFS=/mnt FIRMWARE_RELEASE_STATUS=stable sudo -E rpi-eeprom-update -d -a && \
        sudo umount /mnt
      '';
    };
    */
/*
  fileSystems."/" = {
    device = lib.mkForce "/dev/mapper/crypted";
    fsType = "ext4";
  };
*/
/*
fileSystems."/" = {
            device = lib.mkForce "/dev/disk/by-partlabel/disk-my-disk-luks";
          };
*/
/*
  sdImage = {
    populateFirmwareCommands = let
      configTxt = pkgs.writeText "config.txt" ''
        [pi3]
        kernel=u-boot-rpi3.bin
        [pi4]
        kernel=u-boot-rpi4.bin
        enable_gic=1
        armstub=armstub8-gic.bin
        disable_overscan=1
        [all]
        arm_64bit=1
        enable_uart=1
        avoid_warnings=1
      '';
    in ''
      mkdir -p $NIX_BUILD_TOP/firmware
      (cd ${pkgs.raspberrypifw}/share/raspberrypi/boot && cp bootcode.bin fixup*.dat start*.elf $NIX_BUILD_TOP/firmware/)
      cp ${configTxt} $NIX_BUILD_TOP/firmware/config.txt
      cp ${pkgs.ubootRaspberryPi3_64bit}/u-boot.bin $NIX_BUILD_TOP/firmware/u-boot-rpi3.bin
      cp ${pkgs.ubootRaspberryPi4_64bit}/u-boot.bin $NIX_BUILD_TOP/firmware/u-boot-rpi4.bin
      cp ${pkgs.raspberrypi-armstubs}/armstub8-gic.bin $NIX_BUILD_TOP/firmware/armstub8-gic.bin
      cp ${pkgs.raspberrypifw}/share/raspberrypi/boot/bcm2711-rpi-4-b.dtb $NIX_BUILD_TOP/firmware/
    '';
    populateRootCommands = ''
      mkdir -p ./files/boot
      cp -r $NIX_BUILD_TOP/firmware/* ./files/boot/
    '';
  };

  boot.initrd.postMountCommands = ''
    mount /dev/sda1 /mnt
    cp -r /mnt/firmware/* /mnt/boot/
    umount /mnt
  '';

  nixpkgs.overlays = [
  (final: super: {
    makeModulesClosure = x:
      super.makeModulesClosure (x // { allowMissing = true; });
  })
];
*/
}